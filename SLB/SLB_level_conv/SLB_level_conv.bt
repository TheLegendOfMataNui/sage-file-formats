//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: SLB_level_conv.bt
//   Authors: JrMasterModelBuilder
// Copyright: Copyright (c) 2018 JrMasterModelBuilder
//   License: MPL-2.0
//   Version: 1.2
//   Purpose: Parse SAGE SLB file: *level_conv.slb
//  Category: SAGE
// File Mask: *.slb
//  ID Bytes:
//   History:
//       1.2: Better name.
//       1.1: Improved comments and structs.
//       1.0: Initial release
//------------------------------------------------

typedef ulong OFFSET <format=hex, bgcolor=cPurple>;

local long FOOTER_MAGIC = 0xC0FFEE;

typedef struct {
	long entry_count <
		bgcolor=cDkBlue,
		comment="Number of entries before the footer"
	>;
	long magic <format=hex, bgcolor=cWhite, comment="Magic: 0xC0FFEE">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(FTell() - (8 + entry_count * 4));
		OFFSET entries[entry_count] <comment="Offsets to make pointers">;
		FSeek(tell);
	}
} FOOTER <
	optimize=false,
	comment="List of offsets to be made absolute pointers by the game engine"
>;

void read_footer() {
	// Calculate the offset of footer magic (4-byte aligned).
	local OFFSET footer_offset = FileSize();
	footer_offset -= 4;
	footer_offset >>= 2;
	footer_offset *= 4;

	// Check if footer present.
	if (ReadInt(footer_offset) != FOOTER_MAGIC) {
		return;
	}
	footer_offset -= 4;

	// Remember position, go to footer, read the footer, restore position.
	local OFFSET tell = FTell();
	FSeek(footer_offset);
	FOOTER footer;
	FSeek(tell);
}




typedef union {
	long i <format=hex>;
	char c[4];
} IDENTIFIER <bgcolor=cSilver, comment="Matches: ScIdentifier">;

typedef struct {
	uchar length <bgcolor=cLtBlue, comment="String length, 0-255">;
	if (length) {
		char characters[length] <bgcolor=cLtGreen, comment="String data">;
	}
	char nul <bgcolor=cLtYellow, comment="Null terminator">;
} PSTRINGN <optimize=false, comment="Pascal string, null terminated">;

typedef struct {
	IDENTIFIER id;
	long number <bgcolor=cDkBlue>;
} STRING_TABLE_ID <comment="A pair of values that identifies an entry">;


typedef struct {
	long long_1 <bgcolor=cDkBlue>;
	long long_2 <bgcolor=cDkBlue>;
	long long_3 <bgcolor=cDkBlue>;
	long long_4 <bgcolor=cDkBlue>;
	long string_index <bgcolor=cDkBlue, comment="Index in strings table string list">;
	OFFSET body_offset <comment="Offset of body">;

	local OFFSET tell = FTell();
	FSeek(body_offset);

	PSTRINGN str <comment="String">;

	FSeek(tell);
} FRAME <optimize=false, comment="Frame">;

typedef struct {
	long long_1 <bgcolor=cDkBlue>;
	long long_2 <bgcolor=cDkBlue>;
	long long_3 <bgcolor=cDkBlue>;
	STRING_TABLE_ID id;
	long entry_count <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET body_offset <comment="Offset of body">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(body_offset);

		FRAME entries[entry_count] <comment="Frames">;

		FSeek(tell);
	}
} INFO <optimize=false, comment="Info">;

typedef struct {
	IDENTIFIER id_1;
	IDENTIFIER id_2;
	IDENTIFIER id_3;
	long entry_count <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET body_offset <comment="Offset of body">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(body_offset);

		INFO entries[entry_count] <comment="Infos">;

		FSeek(tell);
	}
} CHARACTER <optimize=false, comment="Character">;

typedef struct {
	long entry_count <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET body_offset <comment="Offset of body">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(body_offset);

		CHARACTER entries[entry_count] <comment="Character">;

		FSeek(tell);
	}
} CHARACTER_TABLE <
	optimize=false,
	comment="Character table",
	open=true
>;




LittleEndian();

read_footer();
CHARACTER_TABLE chararacter_table;
