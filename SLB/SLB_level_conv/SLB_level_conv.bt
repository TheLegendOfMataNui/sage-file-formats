//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: SLB_level_conv.bt
//   Authors: JrMasterModelBuilder
// Copyright: Copyright (c) 2018 JrMasterModelBuilder
//   License: MPL-2.0
//   Version: 1.5
//   Purpose: Parse SAGE SLB file: levels/**/*_conv.slb
//  Category: SAGE
// File Mask: *.slb
//  ID Bytes:
//   History:
//       1.5: Typo fixes.
//       1.4: Better names and info from SLK writing code.
//       1.3: Better types and comments.
//       1.2: Better name.
//       1.1: Improved comments and structs.
//       1.0: Initial release
//------------------------------------------------

typedef ulong OFFSET <format=hex, bgcolor=cPurple>;

local long FOOTER_MAGIC = 0xC0FFEE;

typedef struct {
	long entry_count <
		bgcolor=cDkBlue,
		comment="Number of entries before the footer"
	>;
	long magic <format=hex, bgcolor=cWhite, comment="Magic: 0xC0FFEE">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(FTell() - (8 + entry_count * 4));
		OFFSET entries[entry_count] <comment="Offsets to make pointers">;
		FSeek(tell);
	}
} FOOTER <
	optimize=false,
	comment="List of offsets to be made absolute pointers by the game engine"
>;

void read_footer() {
	// Calculate the offset of footer magic (4-byte aligned).
	local OFFSET footer_offset = FileSize();
	footer_offset -= 4;
	footer_offset >>= 2;
	footer_offset *= 4;

	// Check if footer present.
	if (ReadInt(footer_offset) != FOOTER_MAGIC) {
		return;
	}
	footer_offset -= 4;

	// Remember position, go to footer, read the footer, restore position.
	local OFFSET tell = FTell();
	FSeek(footer_offset);
	FOOTER footer;
	FSeek(tell);
}




typedef union {
	long i <format=hex>;
	char c[4];
} IDENTIFIER <bgcolor=cSilver, comment="Matches: ScIdentifier">;

typedef struct {
	uchar length <bgcolor=cLtBlue, comment="String length, 0-255">;
	if (length) {
		char characters[length] <bgcolor=cLtGreen, comment="String data">;
	}
	char nul <bgcolor=cLtYellow, comment="Null terminator">;
} PSTRINGN <optimize=false, comment="Pascal string, null terminated">;

enum LINE_SIDE {
	LINE_SIDE_RIGHT = 1, // SLK: "kConvRight"
	LINE_SIDE_LEFT = 2   // SLK: "kConvLeft"
	// Other values SLK: ""
};


typedef struct {
	long toa_anim <bgcolor=cDkBlue, comment="Toa animation (SLK: CONV_TOA_ANIM)">;
	long char_anim <bgcolor=cDkBlue, comment="Character animation (SLK: CONV_CHAR_ANIM)">;

	// Contains 2 pieces of information:
	// 1. Character:
	//   -------- -------- -------- -1------ = kConvToa
	//   -------- -------- -------- 1------- = kConvChar
	//   -------- -------- -------1 -------- = kConvBoth
	//   <default>                           = kConvNone
	// 2. Side:
	//   -------- -------- -------- -----1-- = kConvSide
	//   -------- -------- -------- ----1--- = kConvHead
	//   -------- -------- -------- ---1---- = kConvShldr
	//   -------- -------- -------- --1----- = kConvTop
	//   <default>                           = kConvNone
	long cam_pos_targ <
		bgcolor=cDkBlue,
		format=binary,
		comment="Camera position and target, see comments (SLK: CONV_CAM_POS_TARG)"
	>;

	long cam_dist <
		bgcolor=cDkBlue,
		comment="Camera distance (SLK: CONV_CAM_DIST)"
	>;
	long string_index <
		bgcolor=cDkBlue,
		comment="Index in strings table string list (SLK: CONV_STR_OFFSET)"
	>;

	OFFSET body_offset <comment="Offset of body">;
	local OFFSET tell = FTell();
	FSeek(body_offset);

	// Appears to be in 2-char sequences, possible limited to 4.
	PSTRINGN conv_sounds <comment="Conversation sound (SLK: CONV_SOUND)">;

	FSeek(tell);
} FRAME <
	optimize=false,
	comment="Frame (Mapped to: GtConvFrame) (SLK: CONV_FRAME_DATA)"
>;

typedef struct {
	LINE_SIDE line_sid <
		bgcolor=cDkBlue,
		comment="(SLK: 1 = kConvRight, 2 = kConvLeft, others empty)"
	>;

	// Something special about 0x80000000.
	long cond_start <
		bgcolor=cDkBlue,
		format=binary,
		comment="Save flags condition (SLK: CONV_COND_START)"
	>;

	long cond_end <
		bgcolor=cDkBlue,
		format=binary,
		comment="Save flags set (SLK: CONV_COND_END)"
	>;

	// A pair of values that identifies an entry.
	IDENTIFIER str_label <comment="(SLK: CONV_STR_LABEL)">;
	long str_idx <bgcolor=cDkBlue, comment="(SLK: CONV_STR_IDX)">;

	long entry_count <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET body_offset <comment="Offset of body">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(body_offset);

		FRAME entries[entry_count];

		FSeek(tell);
	}
} INFO <
	optimize=false,
	comment="Info (Mapped to: GtConvInfo) (SLK: CONV_DATA)"
>;

typedef struct {
	IDENTIFIER toa_name <comment="(SLK: CONV_TOA_NAME)">;
	IDENTIFIER char_name <comment="(SLK: CONV_CHAR_NAME)">;
	IDENTIFIER chat_cont <comment="(SLK: CONV_CHAR_CONT)">;
 	long entry_count <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET body_offset <comment="Offset of body">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(body_offset);

		INFO entries[entry_count];

		FSeek(tell);
	}
} CHARACTER <
	optimize=false,
	comment="Character (Mapped to: GtConvChar) (SLK: CONV_CHAR_DATA)"
>;

typedef struct {
	long entry_count <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET body_offset <comment="Offset of body">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(body_offset);

		CHARACTER entries[entry_count];

		FSeek(tell);
	}
} CHARACTER_TABLE <
	optimize=false,
	comment="Character table",
	open=true
>;




LittleEndian();

read_footer();
CHARACTER_TABLE chararacter_table;
