//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: SLB_cin_text.bt
//   Authors: JrMasterModelBuilder
// Copyright: Copyright (c) 2018 JrMasterModelBuilder
//   License: MPL-2.0
//   Version: 1.1
//   Purpose: Parse SAGE SLB file: cin*_text.slb
//  Category: SAGE
// File Mask: *.slb
//  ID Bytes:
//   History:
//       1.1: Updated with SLK info.
//       1.0: Initial release
//------------------------------------------------

typedef ulong OFFSET <format=hex, bgcolor=cPurple>;

local long FOOTER_MAGIC = 0xC0FFEE;

typedef struct {
	long entry_count <
		bgcolor=cDkBlue,
		comment="Number of entries before the footer"
	>;
	long magic <format=hex, bgcolor=cWhite, comment="Magic: 0xC0FFEE">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(FTell() - (8 + entry_count * 4));
		OFFSET entries[entry_count] <comment="Offsets to make pointers">;
		FSeek(tell);
	}
} FOOTER <
	optimize=false,
	comment="List of offsets to be made absolute pointers by the game engine"
>;

void read_footer() {
	// Calculate the offset of footer magic (4-byte aligned).
	local OFFSET footer_offset = FileSize();
	footer_offset -= 4;
	footer_offset >>= 2;
	footer_offset *= 4;

	// Check if footer present.
	if (ReadInt(footer_offset) != FOOTER_MAGIC) {
		return;
	}
	footer_offset -= 4;

	// Remember position, go to footer, read the footer, restore position.
	local OFFSET tell = FTell();
	FSeek(footer_offset);
	FOOTER footer;
	FSeek(tell);
}




typedef union {
	long i <format=hex>;
	char c[4];
} IDENTIFIER <bgcolor=cSilver, comment="Matches: ScIdentifier">;

typedef struct {
	float time <bgcolor=cAqua, comment="Frame time (SLK: TEXT_TIME)">;
	long str_offset <bgcolor=cDkBlue, comment="Entry index (SLK: TEXT_STR_OFFSET)">;
} DATA <
	optimize=false,
	comment="Text data (SLK: TEXT_DATA)"
>;

typedef struct {
	long entry_count <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET body_offset <comment="Offset of table body">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(body_offset);

		DATA entries[entry_count];

		FSeek(tell);
	}
} STRING_TABLE <
	optimize=false,
	comment="String table",
	open=true
>;




LittleEndian();

read_footer();

// A pair of values that identifies an entry.
IDENTIFIER str_label <comment="(SLK: TEXT_STR_LABEL)">;
long str_idx <bgcolor=cDkBlue, comment="(SLK: TEXT_STR_IDX)">;

STRING_TABLE string_table;
