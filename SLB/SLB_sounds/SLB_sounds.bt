//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: SLB_sounds.bt
//   Authors: JrMasterModelBuilder
// Copyright: Copyright (c) 2018 JrMasterModelBuilder
//   License: MPL-2.0
//   Version: 1.1
//   Purpose: Parse SAGE SLB file: *_sounds.slb
//  Category: SAGE
// File Mask: *.slb
//  ID Bytes:
//   History:
//       1.1: Updated with SLK info.
//       1.0: Initial release
//------------------------------------------------

typedef ulong OFFSET <format=hex, bgcolor=cPurple>;

local long FOOTER_MAGIC = 0xC0FFEE;

typedef struct {
	long entry_count <
		bgcolor=cDkBlue,
		comment="Number of entries before the footer"
	>;
	long magic <format=hex, bgcolor=cWhite, comment="Magic: 0xC0FFEE">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(FTell() - (8 + entry_count * 4));
		OFFSET entries[entry_count] <comment="Offsets to make pointers">;
		FSeek(tell);
	}
} FOOTER <
	optimize=false,
	comment="List of offsets to be made absolute pointers by the game engine"
>;

void read_footer() {
	// Calculate the offset of footer magic (4-byte aligned).
	local OFFSET footer_offset = FileSize();
	footer_offset -= 4;
	footer_offset >>= 2;
	footer_offset *= 4;

	// Check if footer present.
	if (ReadInt(footer_offset) != FOOTER_MAGIC) {
		return;
	}
	footer_offset -= 4;

	// Remember position, go to footer, read the footer, restore position.
	local OFFSET tell = FTell();
	FSeek(footer_offset);
	FOOTER footer;
	FSeek(tell);
}




typedef union {
	long i <format=hex>;
	char c[4];
} IDENTIFIER <bgcolor=cSilver, comment="Matches: ScIdentifier">;

typedef struct {
	float x <bgcolor=cAqua>;
	float y <bgcolor=cAqua>;
	float z <bgcolor=cAqua>;
} POINT3D <comment="Matches: ScPoint3d">;

typedef struct {
	float x <bgcolor=cAqua>;
	float y <bgcolor=cAqua>;
	float z <bgcolor=cAqua>;
} VECTOR3D <comment="Matches: ScVector">;

typedef struct {
	uchar length <bgcolor=cLtBlue, comment="String length, 0-255">;
	if (length) {
		char characters[length] <bgcolor=cLtGreen, comment="String data">;
	}
	char nul <bgcolor=cLtYellow, comment="Null terminator">;
} PSTRINGN <optimize=false, comment="Pascal string, null terminated">;

typedef struct {
	OFFSET offset <comment="Offset of the pstringn">;
	local OFFSET tell = FTell();
	FSeek(offset);

	PSTRINGN pstringn;

	FSeek(tell);
} PSTRINGN_PTR <optimize=false, comment="Pointer to a pstringn">;


typedef struct {
	PSTRINGN_PTR filename <comment="File path (SLK: SOUND3D_FILENAME)">;
	IDENTIFIER identifier <comment="Sound identifier (SLK: SOUND3D_IDENTIFIER)">;
	long variety <bgcolor=cDkBlue, comment="Sound variety, 8-bit limit (SLK: SOUND3D_VARIETY)">;
	ulong priority <bgcolor=cDkBlue, comment="Sound priority (SLK: SOUND3D_PRIORITY)">;
	float volume <bgcolor=cAqua, comment="Sound volume (SLK: SOUND3D_VOLUME)">;
	long pitch <bgcolor=cDkBlue, comment="Sound pitch (SLK: SOUND3D_PITCH)">;
	POINT3D position <
		comment="Matches: ScVector (SLK: SOUND3D_POSITIONX, SOUND3D_POSITIONY, SOUND3D_POSITIONZ)"
	>;
	VECTOR3D front <
		comment="Matches: ScVector (SLK: SOUND3D_FRONTX, SOUND3D_FRONTY, SOUND3D_FRONTZ)"
	>;
	long insideangle <bgcolor=cDkBlue, comment="Cone angle inside (SLK: SOUND3D_INSIDEANGLE)">;
	long outsideangle <bgcolor=cDkBlue, comment="Cone angle outside (SLK: SOUND3D_OUTSIDEANGLE)">;
	float outsidevolume <bgcolor=cAqua, comment="Outside volume (SLK: SOUND3D_OUTSIDEVOLUME)">;
	float mindistance <bgcolor=cAqua, comment="Distance min (SLK: SOUND3D_MINDISTANCE)">;
	float maxdistance <bgcolor=cAqua, comment="Distance max (SLK: SOUND3D_MAXDISTANCE)">;
} SOUND <optimize=false, comment="Sound (SLK: SOUND3D_DATA)">;

typedef struct {
	long entry_count <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET body_offset <comment="Offset of textures">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(body_offset);

		SOUND entries[entry_count] <comment="Sounds">;

		FSeek(tell);
	}
} SOUND_TABLE <
	optimize=false,
	comment="Sound table",
	open=true
>;




LittleEndian();

read_footer();
SOUND_TABLE sound_table;
