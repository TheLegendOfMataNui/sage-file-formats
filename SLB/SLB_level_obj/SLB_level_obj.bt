//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: SLB_level_obj.bt
//   Authors: JrMasterModelBuilder
// Copyright: Copyright (c) 2018 JrMasterModelBuilder
//   License: MPL-2.0
//   Version: 1.0
//   Purpose: Parse SAGE SLB file: lev*/**/*_obj.slb
//  Category: SAGE
// File Mask: *.slb
//  ID Bytes:
//   History:
//------------------------------------------------

typedef ulong OFFSET <format=hex, bgcolor=cPurple>;

local long FOOTER_MAGIC = 0xC0FFEE;

typedef struct {
	long entry_count <
		bgcolor=cDkBlue,
		comment="Number of entries before the footer"
	>;
	long magic <format=hex, bgcolor=cWhite, comment="Magic: 0xC0FFEE">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(FTell() - (8 + entry_count * 4));
		OFFSET entries[entry_count] <comment="Offsets to make pointers">;
		FSeek(tell);
	}
} FOOTER <
	optimize=false,
	comment="List of offsets to be made absolute pointers by the game engine"
>;

void read_footer() {
	// Calculate the offset of footer magic (4-byte aligned).
	local OFFSET footer_offset = FileSize();
	footer_offset -= 4;
	footer_offset >>= 2;
	footer_offset *= 4;

	// Check if footer present.
	if (ReadInt(footer_offset) != FOOTER_MAGIC) {
		return;
	}
	footer_offset -= 4;

	// Remember position, go to footer, read the footer, restore position.
	local OFFSET tell = FTell();
	FSeek(footer_offset);
	FOOTER footer;
	FSeek(tell);
}




typedef char ID[4] <bgcolor=cWhite>;

typedef struct {
	float x <bgcolor=cAqua>;
	float y <bgcolor=cAqua>;
	float z <bgcolor=cAqua>;
} POINT3D <comment="Matches: ScPoint3d">;

typedef struct {
	ID id <comment="Object ID, gets mapped to a file name">;
	POINT3D location;
	POINT3D orientation;
	float unknown <bgcolor=cAqua, comment="Unread, usually: -1">;
	POINT3D collision_point_1 <comment="Used for collision primitive">;
	POINT3D collision_point_2 <comment="Used for collision primitive">;

	// Flags (high 16 bits trimmed):
	// Object type:
	// -------- --11----: GcAreaDirector, Physics (Physics object)
	// -------1 --01----: GcTransDirector (Transparent static object, back faces)
	// -------0 --01----: GcAreaDirector (Static object, without back faces)
	// -------- --10----: GcNoLightDirector, Physics (Unused, may not work correctly)
	// -------- --001---: GcBackDirector (Static object, with back faces)
	// Collision type for physics objects (first match, defaults to Box):
	// -------- ------1-: Box
	// -------- -------1: Cylinder
	// -----1-- --------: Sphere
	// -------- -----1--: Use file: collide.cdx
	long flags <
		format=binary,
		bgcolor=cDkBlue,
		comment="Options for the object"
	>;
} POSITION <format=binary, comment="Position">;

typedef struct {
	ID id <
		bgcolor=cDkBlue,
		comment="Reserved space for ID"
	>;
	long entry_count_unused <bgcolor=cDkBlue, comment="Number of entries">;
	long entry_count <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET body_offset <comment="Offset of table body">;
	char unknown[body_offset - FTell()] <
		bgcolor=cRed,
		comment="Unread, padding?"
	>;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(body_offset);

		POSITION entries[entry_count] <comment="Positions">;

		FSeek(tell);
	}
} OBJECT_TABLE <
	optimize=false,
	comment="Position table",
	open=true
>;




LittleEndian();

read_footer();
OBJECT_TABLE object_table;
