//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: SLB_pos.bt
//   Authors: JrMasterModelBuilder
// Copyright: Copyright (c) 2018 JrMasterModelBuilder
//   License: MPL-2.0
//   Version: 1.0
//   Purpose: Parse SAGE SLB file: *_pos.slb
//  Category: SAGE
// File Mask: *.slb
//  ID Bytes:
//   History:
//       1.0: Initial release
//------------------------------------------------

typedef ulong OFFSET <format=hex, bgcolor=cPurple>;

local long FOOTER_MAGIC = 0xC0FFEE;

typedef struct {
	long entry_count <
		bgcolor=cDkBlue,
		comment="Number of entries before the footer"
	>;
	long magic <format=hex, bgcolor=cWhite, comment="Magic: 0xC0FFEE">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(FTell() - (8 + entry_count * 4));
		OFFSET entries[entry_count] <comment="Offsets to make pointers">;
		FSeek(tell);
	}
} FOOTER <
	optimize=false,
	comment="List of offsets to be made absolute pointers by the game engine"
>;

void read_footer() {
	// Calculate the offset of footer magic (4-byte aligned).
	local OFFSET footer_offset = FileSize();
	footer_offset -= 4;
	footer_offset >>= 2;
	footer_offset *= 4;

	// Check if footer present.
	if (ReadInt(footer_offset) != FOOTER_MAGIC) {
		return;
	}
	footer_offset -= 4;

	// Remember position, go to footer, read the footer, restore position.
	local OFFSET tell = FTell();
	FSeek(footer_offset);
	FOOTER footer;
	FSeek(tell);
}




typedef union {
	long i <format=hex>;
	char c[4];
} IDENTIFIER <bgcolor=cSilver, comment="Matches: ScIdentifier">;

typedef struct {
	float x <bgcolor=cAqua>;
	float y <bgcolor=cAqua>;
	float z <bgcolor=cAqua>;
} POINT3D <comment="Matches: ScPoint3d">;

typedef struct {
	float x <bgcolor=cAqua>;
	float y <bgcolor=cAqua>;
	float z <bgcolor=cAqua>;
} VECTOR3D <comment="Matches: ScVector">;

typedef struct {
	// For pickups, the first 2 characters (after swapping) define which.
	IDENTIFIER id <
		comment="Object ID: te: Token, ph: Fruit, pe: Sphere, pa: Bubble"
	>;

	POINT3D position <comment="Position of the entry">;

	// Flags (high 16 bits trimmed, first match):
	// ---1---- --------: Start position
	// -------- 11------: Pickup sprite
	long flags <
		format=binary,
		bgcolor=cDkBlue
	>;
} POSITION <format=binary, comment="Position">;

typedef struct {
	long entry_count_unused <bgcolor=cDkBlue, comment="Number of entries">;
	long entry_count <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET body_offset <comment="Offset of table body">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(body_offset);

		POSITION entries[entry_count] <comment="Positions">;

		FSeek(tell);
	}
} POSITION_TABLE <
	optimize=false,
	comment="Position table",
	open=true
>;




LittleEndian();

read_footer();
POSITION_TABLE position_table;
