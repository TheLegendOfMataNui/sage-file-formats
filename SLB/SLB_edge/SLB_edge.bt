//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: SLB_edge.bt
//   Authors: JrMasterModelBuilder
// Copyright: Copyright (c) 2018 JrMasterModelBuilder
//   License: MPL-2.0
//   Version: 1.0
//   Purpose: Parse SAGE SLB file: *_edge.slb
//  Category: SAGE
// File Mask: *.slb
//  ID Bytes:
//   History:
//       1.0: Initial release
//------------------------------------------------

typedef ulong OFFSET <format=hex, bgcolor=cPurple>;

local long FOOTER_MAGIC = 0xC0FFEE;

typedef struct {
	long entry_count <
		bgcolor=cDkBlue,
		comment="Number of entries before the footer"
	>;
	long magic <format=hex, bgcolor=cWhite, comment="Magic: 0xC0FFEE">;

	if (entry_count) {
		local OFFSET tell = FTell();
		FSeek(FTell() - (8 + entry_count * 4));
		OFFSET entries[entry_count] <comment="Offsets to make pointers">;
		FSeek(tell);
	}
} FOOTER <
	optimize=false,
	comment="List of offsets to be made absolute pointers by the game engine"
>;

void read_footer() {
	// Calculate the offset of footer magic (4-byte aligned).
	local OFFSET footer_offset = FileSize();
	footer_offset -= 4;
	footer_offset >>= 2;
	footer_offset *= 4;

	// Check if footer present.
	if (ReadInt(footer_offset) != FOOTER_MAGIC) {
		return;
	}
	footer_offset -= 4;

	// Remember position, go to footer, read the footer, restore position.
	local OFFSET tell = FTell();
	FSeek(footer_offset);
	FOOTER footer;
	FSeek(tell);
}




typedef union {
	long i <format=hex>;
	char c[4];
} IDENTIFIER <bgcolor=cSilver, comment="Matches: ScIdentifier">;

typedef struct {
	float a <bgcolor=cAqua, comment="Unknown">;
	float b <bgcolor=cAqua, comment="Unknown">;
} EDGE_DATA <comment="Edge data">;

typedef struct {
	long length <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET ptr <comment="Offset of vector body">;

	if (length) {
		local OFFSET tell = FTell();
		FSeek(ptr);

		EDGE_DATA entries[length] <comment="Edge datas">;

		FSeek(tell);
	}
} EDGE_DATA_TABLE <
	optimize=false,
	comment="Edge data table"
>;

typedef struct {
	IDENTIFIER id;
	EDGE_DATA_TABLE edge_data;
} EDGE <optimize=false, comment="Edge">;

typedef struct {
	long length <bgcolor=cDkBlue, comment="Number of entries">;
	OFFSET ptr <comment="Offset of vector body">;

	if (length) {
		local OFFSET tell = FTell();
		FSeek(ptr);

		EDGE entries[length] <comment="Edges">;

		FSeek(tell);
	}
} EDGE_TABLE <
	optimize=false,
	comment="Edge table",
	open=true
>;




LittleEndian();

read_footer();
EDGE_TABLE edge_table;
